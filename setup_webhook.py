import requests
import json
from config import TELEGRAM_TOKEN

def setup_webhook(webhook_url):
    """Configura o webhook do Telegram"""
    print(f"üîó Configurando webhook: {webhook_url}")
    
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook"
    data = {"url": webhook_url}
    
    try:
        response = requests.post(url, json=data)
        result = response.json()
        
        if result.get("ok"):
            print("‚úÖ Webhook configurado com sucesso!")
            print(f"üì° URL: {webhook_url}")
            return True
        else:
            print(f"‚ùå Erro ao configurar webhook: {result}")
            return False
    
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False

def get_webhook_info():
    """Obt√©m informa√ß√µes do webhook atual"""
    print("üìä Verificando webhook atual...")
    
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getWebhookInfo"
    
    try:
        response = requests.get(url)
        result = response.json()
        
        if result.get("ok"):
            webhook_info = result["result"]
            print("‚úÖ Informa√ß√µes do webhook:")
            print(f"üì° URL: {webhook_info.get('url', 'N√£o configurado')}")
            print(f"üìä Updates pendentes: {webhook_info.get('pending_update_count', 0)}")
            return webhook_info
        else:
            print(f"‚ùå Erro ao obter webhook info: {result}")
            return None
    
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return None

def delete_webhook():
    """Remove o webhook do Telegram"""
    print("üóëÔ∏è Removendo webhook...")
    
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteWebhook"
    
    try:
        response = requests.post(url)
        result = response.json()
        
        if result.get("ok"):
            print("‚úÖ Webhook removido com sucesso!")
            return True
        else:
            print(f"‚ùå Erro ao remover webhook: {result}")
            return False
    
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False

def test_bot():
    """Testa se o bot est√° funcionando"""
    print("ü§ñ Testando bot...")
    
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMe"
    
    try:
        response = requests.get(url)
        result = response.json()
        
        if result.get("ok"):
            bot_info = result["result"]
            print("‚úÖ Bot funcionando!")
            print(f"üì± Nome: {bot_info['first_name']}")
            print(f"üë§ Username: @{bot_info['username']}")
            print(f"üÜî ID: {bot_info['id']}")
            return True
        else:
            print(f"‚ùå Erro no bot: {result}")
            return False
    
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîß CONFIGURADOR DE WEBHOOK")
    print("=" * 50)
    
    # Testar bot
    if not test_bot():
        print("\n‚ùå Bot n√£o est√° funcionando. Verifique o token.")
        return
    
    # Verificar webhook atual
    webhook_info = get_webhook_info()
    
    print("\nüìã OP√á√ïES:")
    print("1. Configurar webhook com URL personalizada")
    print("2. Remover webhook atual")
    print("3. Ver informa√ß√µes do webhook")
    print("4. Sair")
    
    while True:
        try:
            choice = input("\nEscolha uma op√ß√£o (1-4): ").strip()
            
            if choice == "1":
                webhook_url = input("Digite a URL do webhook (ex: https://abc123.ngrok.io/webhook/telegram): ").strip()
                if webhook_url:
                    setup_webhook(webhook_url)
                else:
                    print("‚ùå URL inv√°lida")
            
            elif choice == "2":
                delete_webhook()
            
            elif choice == "3":
                get_webhook_info()
            
            elif choice == "4":
                print("üëã Saindo...")
                break
            
            else:
                print("‚ùå Op√ß√£o inv√°lida")
        
        except KeyboardInterrupt:
            print("\nüëã Saindo...")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    main() 