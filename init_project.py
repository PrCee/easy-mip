#!/usr/bin/env python3
"""
Script de inicializa√ß√£o do MIP Generator
Configura o ambiente de forma segura
"""

import os
import shutil
from pathlib import Path

def check_env_file():
    """Verifica se o arquivo .env existe"""
    env_file = Path(".env")
    env_example = Path("env.example")
    
    if not env_file.exists():
        if env_example.exists():
            print("üìù Criando arquivo .env a partir do exemplo...")
            shutil.copy(env_example, env_file)
            print("‚úÖ Arquivo .env criado!")
            print("‚ö†Ô∏è  IMPORTANTE: Configure o TELEGRAM_TOKEN no arquivo .env")
        else:
            print("‚ùå Arquivo env.example n√£o encontrado!")
            return False
    else:
        print("‚úÖ Arquivo .env j√° existe")
    
    return True

def check_directories():
    """Cria diret√≥rios necess√°rios"""
    directories = ["uploads", "output", "assets"]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Diret√≥rio {directory}/ criado/verificado")

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    try:
        import fastapi
        import requests
        import uvicorn
        print("‚úÖ Depend√™ncias principais instaladas")
        return True
    except ImportError as e:
        print(f"‚ùå Depend√™ncia faltando: {e}")
        print("üí° Execute: pip install -r requirements.txt")
        return False

def check_telegram_token():
    """Verifica se o token do Telegram est√° configurado"""
    from dotenv import load_dotenv
    load_dotenv()
    
    token = os.getenv("TELEGRAM_TOKEN")
    if not token or token == "seu_token_aqui":
        print("‚ùå TELEGRAM_TOKEN n√£o configurado!")
        print("üí° Configure o token no arquivo .env")
        return False
    else:
        print("‚úÖ TELEGRAM_TOKEN configurado")
        return True

def main():
    """Fun√ß√£o principal"""
    print("üöÄ INICIALIZADOR DO MIP GENERATOR")
    print("=" * 50)
    
    # Verificar depend√™ncias
    if not check_dependencies():
        return
    
    # Verificar arquivo .env
    if not check_env_file():
        return
    
    # Criar diret√≥rios
    check_directories()
    
    # Verificar token
    if not check_telegram_token():
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Configure o TELEGRAM_TOKEN no arquivo .env")
        print("2. Execute: python telegram_server_simple.py")
        print("3. Use ngrok para expor o servidor")
        print("4. Configure o webhook com: python setup_webhook.py")
        return
    
    print("\nüéâ PROJETO CONFIGURADO COM SUCESSO!")
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("1. Execute: python telegram_server_simple.py")
    print("2. Use ngrok para expor o servidor: ngrok http 8000")
    print("3. Configure o webhook: python setup_webhook.py")
    print("4. Teste o bot no Telegram!")

if __name__ == "__main__":
    main() 